"""Initial migration

Revision ID: e43663f6cc44
Revises: 
Create Date: 2025-01-19 12:43:25.550330

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e43663f6cc44'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('projects',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('project_number', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'project_number', name='uix_user_project_number')
    )
    op.create_table('individuals',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('individual_number', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('birth_place', sa.String(length=100), nullable=True),
    sa.Column('death_date', sa.Date(), nullable=True),
    sa.Column('death_place', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('death_date IS NULL OR birth_date IS NULL OR birth_date <= death_date', name='chk_individual_dates'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('project_id', 'individual_number', name='uix_project_individual_number')
    )
    op.create_index(op.f('ix_individuals_birth_place'), 'individuals', ['birth_place'], unique=False)
    op.create_index(op.f('ix_individuals_death_place'), 'individuals', ['death_place'], unique=False)
    op.create_index(op.f('ix_individuals_project_id'), 'individuals', ['project_id'], unique=False)
    op.create_index(op.f('ix_individuals_user_id'), 'individuals', ['user_id'], unique=False)
    op.create_table('identities',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('individual_id', sa.Integer(), nullable=False),
    sa.Column('identity_number', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('gender', sa.Enum('FEMALE', 'MALE', 'TRANSGENDER', 'GENDER_NEUTRAL', 'NON_BINARY', 'AGENDER', 'PANGENDER', 'GENDERQUEER', 'TWO_SPIRIT', 'THIRD_GENDER', 'OTHER', 'UNKNOWN', name='genderenum'), nullable=True),
    sa.Column('valid_from', sa.Date(), nullable=True),
    sa.Column('valid_until', sa.Date(), nullable=True),
    sa.Column('is_primary', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('valid_until IS NULL OR valid_until > valid_from', name='chk_validity_dates'),
    sa.ForeignKeyConstraint(['individual_id'], ['individuals.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('individual_id', 'identity_number', name='uix_identity_identity_number')
    )
    op.create_index(op.f('ix_identities_individual_id'), 'identities', ['individual_id'], unique=False)
    op.create_index('uix_individual_primary_identity', 'identities', ['individual_id'], unique=True, postgresql_where=sa.text('is_primary = true'))
    op.create_table('relationships',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('individual_id', sa.Integer(), nullable=False),
    sa.Column('related_id', sa.Integer(), nullable=False),
    sa.Column('initial_relationship', sa.Enum('CHILD', 'PARENT', 'PARTNER', name='initial_relationship_enum'), nullable=False),
    sa.Column('relationship_detail_horizontal', sa.Enum('BIOLOGICAL', 'STEP', 'ADOPTIVE', 'FOSTER', 'OTHER', name='horizontal_relationship_enum'), nullable=True),
    sa.Column('relationship_detail_vertical', sa.Enum('MARRIAGE', 'CIVIL_UNION', 'PARTNERSHIP', name='vertical_relationship_enum'), nullable=True),
    sa.Column('union_date', sa.Date(), nullable=True),
    sa.Column('union_place', sa.String(length=100), nullable=True),
    sa.Column('dissolution_date', sa.Date(), nullable=True),
    sa.Column('notes', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('dissolution_date IS NULL OR union_date IS NULL OR union_date <= dissolution_date', name='chk_relationship_dates'),
    sa.CheckConstraint('individual_id != related_id', name='chk_relationship_no_self'),
    sa.ForeignKeyConstraint(['individual_id'], ['individuals.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['related_id'], ['individuals.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_relationships_individual_id'), 'relationships', ['individual_id'], unique=False)
    op.create_index(op.f('ix_relationships_project_id'), 'relationships', ['project_id'], unique=False)
    op.create_index(op.f('ix_relationships_related_id'), 'relationships', ['related_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_relationships_related_id'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_project_id'), table_name='relationships')
    op.drop_index(op.f('ix_relationships_individual_id'), table_name='relationships')
    op.drop_table('relationships')
    op.drop_index('uix_individual_primary_identity', table_name='identities', postgresql_where=sa.text('is_primary = true'))
    op.drop_index(op.f('ix_identities_individual_id'), table_name='identities')
    op.drop_table('identities')
    op.drop_index(op.f('ix_individuals_user_id'), table_name='individuals')
    op.drop_index(op.f('ix_individuals_project_id'), table_name='individuals')
    op.drop_index(op.f('ix_individuals_death_place'), table_name='individuals')
    op.drop_index(op.f('ix_individuals_birth_place'), table_name='individuals')
    op.drop_table('individuals')
    op.drop_table('projects')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
