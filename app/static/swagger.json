{
  "openapi": "3.0.0",
  "info": {
    "title": "Gener-AI-tions API",
    "version": "1.0.0",
    "description": "Comprehensive API documentation for Gener-AI-tions application."
  },
  "servers": [
    {
      "url": "/",
      "description": "Main Server"
    }
  ],
  "tags": [
    {
      "name": "Admin",
      "description": "Endpoints requiring admin privileges."
    },
    {
      "name": "Auth",
      "description": "User authentication endpoints (signup, login, logout)."
    },
    {
      "name": "Users",
      "description": "Endpoints related to the currently logged-in user (profile)."
    },
    {
      "name": "Projects",
      "description": "CRUD operations on user projects."
    },
    {
      "name": "Individuals",
      "description": "CRUD operations on individuals."
    },
    {
      "name": "Identities",
      "description": "Endpoints for managing identities tied to individuals."
    },
    {
      "name": "Relationships",
      "description": "Endpoints for managing relationships between individuals."
    }
  ],
  "paths": {
    "/api/admin/users": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "List All Users",
        "description": "Retrieve a paginated list of all users. **Requires admin privileges.**",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination (default is 1)."
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of users per page (default is 20, maximum is 100)."
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of users retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of users."
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number."
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of users per page."
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserOut"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided."
          },
          "403": {
            "description": "Forbidden. The user does not have admin privileges."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign Up (Registration)",
        "description": "Register a new user account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              },
              "example": {
                "username": "johndoe",
                "email": "johndoe@example.com",
                "password": "SecurePass123!",
                "confirm_password": "SecurePass123!"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "409": {
            "description": "Conflict. Email or username already in use."
          },
          "500": {
            "description": "Server error during signup"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "Log in with email and password to obtain access tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              },
              "example": {
                "email": "johndoe@example.com",
                "password": "SecurePass123!"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful."
          },
          "400": {
            "description": "Validation error or bad request."
          },
          "401": {
            "description": "Invalid credentials."
          },
          "500": {
            "description": "Server error during login"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "Log out the current user by unsetting JWT cookies.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful."
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided."
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user profile",
        "description": "Retrieve the profile of the currently logged-in user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserOut"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No user identity in token."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Error occurred while fetching profile."
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user profile",
        "description": "Update the current user's username, email, or password.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              },
              "example": {
                "username": "john_doe_new",
                "email": "john.doe.new@example.com",
                "password": "NewSecurePass456!",
                "confirm_password": "NewSecurePass456!"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully."
          },
          "401": {
            "description": "No user identity in token."
          },
          "409": {
            "description": "Username or email already in use."
          },
          "500": {
            "description": "Error updating profile."
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user account",
        "description": "Permanently delete the current user's account.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully."
          },
          "401": {
            "description": "No user identity in token."
          },
          "400": {
            "description": "Failed to delete account."
          },
          "500": {
            "description": "Error deleting account."
          }
        }
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Projects",
        "description": "List all projects belonging to the current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination (default is 1)."
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of projects per page (default is 20)."
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects retrieved successfully."
          },
          "401": {
            "description": "Unauthorized."
          },
          "500": {
            "description": "Error fetching projects."
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create Project",
        "description": "Create a new project for the current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Project data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully."
          },
          "400": {
            "description": "Validation error or bad request."
          },
          "409": {
            "description": "Conflict. Project name might be taken."
          },
          "500": {
            "description": "Server error creating project."
          }
        }
      }
    },
    "/api/projects/{project_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project",
        "description": "Retrieve details of a specific project by ID, if owned by the current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully."
          },
          "401": {
            "description": "Unauthorized. No user identity found in token."
          },
          "404": {
            "description": "Project not found or not owned by the user."
          },
          "500": {
            "description": "Error occurred while fetching the project."
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Project",
        "description": "Update the name of an existing project, if owned by current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "description": "Updated project data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully."
          },
          "400": {
            "description": "Validation error or bad request."
          },
          "404": {
            "description": "Project not found or unauthorized access."
          },
          "409": {
            "description": "Conflict. Possibly name is in use or project not found."
          },
          "500": {
            "description": "Error updating project."
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Project",
        "description": "Delete a project by ID, if owned by current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully."
          },
          "404": {
            "description": "Project not found or no permission."
          },
          "500": {
            "description": "Error occurred while deleting project."
          }
        }
      }
    },
    "/api/individuals": {
      "get": {
        "tags": [
          "Individuals"
        ],
        "summary": "List Individuals",
        "description": "List all individuals within a specific project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query (optional)."
          }
        ],
        "responses": {
          "200": {
            "description": "List of individuals retrieved successfully."
          },
          "400": {
            "description": "Project ID is required."
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided."
          }
        }
      },
      "post": {
        "tags": [
          "Individuals"
        ],
        "summary": "Create Individual",
        "description": "Create a new individual within a project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "description": "Individual data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndividualCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Individual created successfully"
          },
          "400": {
            "description": "Validation error or bad request"
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/api/individuals/{individual_id}": {
      "get": {
        "tags": [
          "Individuals"
        ],
        "summary": "Get Individual",
        "description": "Retrieve details of an individual by ID within a project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "individual_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Individual ID"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Individual retrieved successfully."
          },
          "400": {
            "description": "Missing or invalid project ID."
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided."
          },
          "404": {
            "description": "Individual not found."
          }
        }
      },
      "patch": {
        "tags": [
          "Individuals"
        ],
        "summary": "Update Individual",
        "description": "Update details of an existing individual by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "individual_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndividualUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Individual updated successfully"
          },
          "400": {
            "description": "Validation error or bad request"
          },
          "404": {
            "description": "Individual not found or unauthorized access"
          }
        }
      },
      "delete": {
        "tags": [
          "Individuals"
        ],
        "summary": "Delete Individual",
        "description": "Delete an individual by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "individual_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Individual deleted successfully"
          },
          "404": {
            "description": "Individual not found or unauthorized access"
          }
        }
      }
    },
    "/api/individuals/search": {
      "get": {
        "tags": [
          "Individuals"
        ],
        "summary": "Search Individuals",
        "description": "Search individuals in a project by query string, excluding specific IDs if desired.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exclude_ids",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search results for individuals."
          },
          "400": {
            "description": "Project ID required or invalid exclude_ids."
          },
          "401": {
            "description": "Unauthorized."
          },
          "404": {
            "description": "Project not found or not owned by user."
          }
        }
      }
    },
    "/api/identities": {
      "get": {
        "tags": [
          "Identities"
        ],
        "summary": "List Identities",
        "description": "Retrieve a list of all identities within a specific project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project to filter identities."
          }
        ],
        "responses": {
          "200": {
            "description": "List of identities retrieved successfully."
          },
          "400": {
            "description": "Project ID is required or invalid."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      },
      "post": {
        "tags": [
          "Identities"
        ],
        "summary": "Create Identity",
        "description": "Create a new identity for an individual within a project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Identity data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityCreate"
              },
              "example": {
                "individual_id": 42,
                "first_name": "Jane",
                "last_name": "Doe",
                "gender": "female",
                "valid_from": "2022-01-01",
                "valid_until": null
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Identity created successfully."
          },
          "400": {
            "description": "Validation error or bad request."
          }
        }
      }
    },
    "/api/identities/{identity_id}": {
      "get": {
        "tags": [
          "Identities"
        ],
        "summary": "Get Specific Identity",
        "description": "Retrieve detailed information of a specific identity by its ID within a project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "identity_id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the identity to retrieve.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "description": "The ID of the project to which the identity belongs.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Identity retrieved successfully."
          },
          "400": {
            "description": "Missing or invalid project ID."
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided."
          },
          "404": {
            "description": "Identity not found in the specified project."
          }
        }
      },
      "patch": {
        "tags": [
          "Identities"
        ],
        "summary": "Update Identity",
        "description": "Update details of an identity by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "identity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityUpdate"
              },
              "example": {
                "first_name": "Jane",
                "last_name": "Doe-Smith",
                "gender": "female",
                "valid_from": "2023-01-01",
                "valid_until": null,
                "is_primary": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Identity updated successfully"
          },
          "400": {
            "description": "Validation error or bad request"
          },
          "404": {
            "description": "Identity not found or unauthorized access"
          }
        }
      },
      "delete": {
        "tags": [
          "Identities"
        ],
        "summary": "Delete Identity",
        "description": "Delete an identity by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "identity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Identity deleted successfully"
          },
          "404": {
            "description": "Identity not found or unauthorized access"
          }
        }
      }
    },
    "/api/relationships": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "List all Relationships by project",
        "description": "List all relationships for a given project ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of relationships retrieved successfully."
          },
          "400": {
            "description": "Project ID is required or invalid."
          },
          "401": {
            "description": "No valid JWT provided."
          }
        }
      },
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "Create Relationship",
        "description": "Create a new relationship between two individuals.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Relationship data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipCreate"
              },
              "example": {
                "individual_id": 1,
                "related_id": 2,
                "initial_relationship": "child",
                "relationship_detail": "biological",
                "union_date": null,
                "union_place": null,
                "dissolution_date": null,
                "notes": "Example relationship notes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Relationship created successfully"
          },
          "400": {
            "description": "Validation error or bad request"
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided."
          },
          "404": {
            "description": "One or both individuals not found in this project."
          }
        }
      }
    },
    "/api/relationships/{relationship_id}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get Relationship by ID",
        "description": "Retrieve details of a specific relationship by its ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "relationship_id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the relationship.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "description": "The project ID in which this relationship resides.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relationship retrieved successfully."
          },
          "400": {
            "description": "Project ID is missing or invalid."
          },
          "401": {
            "description": "No user identity found in token."
          },
          "404": {
            "description": "Relationship not found in this project."
          }
        }
      },
      "patch": {
        "tags": [
          "Relationships"
        ],
        "summary": "Update Relationship",
        "description": "Update details of a specific relationship by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "relationship_id",
            "in": "path",
            "required": true,
            "description": "Relationship ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Relationship data to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipUpdate"
              },
              "example": {
                "initial_relationship": "parent",
                "relationship_detail": "step",
                "union_date": "2023-05-01",
                "union_place": null,
                "dissolution_date": null,
                "notes": "Updated notes about the relationship",
                "individual_id": 1,
                "related_id": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Relationship updated successfully"
          },
          "400": {
            "description": "Validation error or bad request."
          },
          "404": {
            "description": "Relationship not found or unauthorized access."
          }
        }
      },
      "delete": {
        "tags": [
          "Relationships"
        ],
        "summary": "Delete Relationship",
        "description": "Delete a specific relationship by its ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "relationship_id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the relationship to delete.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Relationship deleted successfully"
          },
          "404": {
            "description": "Relationship not found or unauthorized access"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserCreate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128
          },
          "confirm_password": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "email",
          "password",
          "confirm_password"
        ]
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128,
            "nullable": true
          },
          "confirm_password": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "is_admin": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProjectCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "ProjectUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProjectOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "project_number": {
            "type": "integer"
          },
          "user_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "entity_counts": {
            "type": "object",
            "nullable": true,
            "properties": {
              "individuals": {
                "type": "integer"
              },
              "relationships": {
                "type": "integer"
              }
            }
          }
        }
      },
      "IndividualCreate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "birth_place": {
            "type": "string",
            "maxLength": 100,
            "nullable": true
          },
          "death_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "death_place": {
            "type": "string",
            "maxLength": 100,
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "first_name",
          "last_name",
          "gender"
        ]
      },
      "IndividualUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum",
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "birth_place": {
            "type": "string",
            "maxLength": 100,
            "nullable": true
          },
          "death_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "death_place": {
            "type": "string",
            "maxLength": 100,
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "IndividualOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "individual_number": {
            "type": "integer"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "birth_place": {
            "type": "string",
            "nullable": true
          },
          "death_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "death_place": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "nullable": true
          },
          "primary_identity": {
            "$ref": "#/components/schemas/IdentityOut",
            "nullable": true
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityIdOut"
            }
          }
        }
      },
      "IdentityCreate": {
        "type": "object",
        "properties": {
          "individual_id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum"
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        },
        "required": [
          "individual_id",
          "first_name",
          "last_name",
          "gender"
        ]
      },
      "IdentityUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum",
            "nullable": true
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "is_primary": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "IdentityOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "individual_id": {
            "type": "integer"
          },
          "identity_number": {
            "type": "integer"
          },
          "first_name": {
            "type": "string",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum",
            "nullable": true
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "is_primary": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IdentityIdOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          }
        }
      },
      "RelationshipCreate": {
        "type": "object",
        "properties": {
          "individual_id": {
            "type": "integer"
          },
          "related_id": {
            "type": "integer"
          },
          "initial_relationship": {
            "$ref": "#/components/schemas/InitialRelationshipEnum"
          },
          "relationship_detail": {
            "type": "string",
            "nullable": true
          },
          "union_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "union_place": {
            "type": "string",
            "nullable": true
          },
          "dissolution_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "maxLength": 255
          }
        },
        "required": [
          "individual_id",
          "related_id",
          "initial_relationship"
        ]
      },
      "RelationshipUpdate": {
        "type": "object",
        "properties": {
          "initial_relationship": {
            "$ref": "#/components/schemas/InitialRelationshipEnum",
            "nullable": true
          },
          "relationship_detail": {
            "type": "string",
            "nullable": true
          },
          "union_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "union_place": {
            "type": "string",
            "nullable": true
          },
          "dissolution_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "individual_id": {
            "type": "integer",
            "nullable": true
          },
          "related_id": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "RelationshipOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "individual_id": {
            "type": "integer",
            "description": "The ID of the primary individual in the relationship"
          },
          "related_id": {
            "type": "integer",
            "description": "The ID of the related individual in the relationship"
          },
          "initial_relationship": {
            "$ref": "#/components/schemas/InitialRelationshipEnum"
          },
          "relationship_detail": {
            "type": "string",
            "nullable": true
          },
          "union_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "union_place": {
            "type": "string",
            "nullable": true
          },
          "dissolution_date": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "maxLength": 255,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "individual": {
            "$ref": "#/components/schemas/IndividualOut"
          },
          "related": {
            "$ref": "#/components/schemas/IndividualOut"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "GenderEnum": {
        "type": "string",
        "enum": [
          "female",
          "male",
          "transgender",
          "gender neutral",
          "non binary",
          "agender",
          "pangender",
          "genderqueer",
          "two spirit",
          "third gender",
          "other",
          "unknown"
        ],
        "description": "Gender of the individual."
      },
      "InitialRelationshipEnum": {
        "type": "string",
        "enum": [
          "child",
          "parent",
          "partner"
        ],
        "description": "The initial type of relationship."
      },
      "HorizontalRelationshipTypeEnum": {
        "type": "string",
        "enum": [
          "biological",
          "step",
          "adoptive",
          "foster",
          "other"
        ],
        "description": "Types of horizontal relationships for child/parent."
      },
      "VerticalRelationshipTypeEnum": {
        "type": "string",
        "enum": [
          "marriage",
          "civil union",
          "partnership"
        ],
        "description": "Types of vertical relationships for partners."
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
      }
    }
  }
}