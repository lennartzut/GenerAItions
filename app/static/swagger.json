{
  "openapi": "3.0.0",
  "info": {
    "title": "Gener-AI-tions API",
    "version": "1.0.0",
    "description": "Comprehensive API documentation for the Gener-AI-tions application."
  },
  "servers": [
    {
      "url": "/",
      "description": "Main Server"
    }
  ],
  "tags": [
    {
      "name": "Admin",
      "description": "Endpoints requiring admin privileges."
    },
    {
      "name": "Auth",
      "description": "User authentication endpoints (signup, login, logout)."
    },
    {
      "name": "Users",
      "description": "Endpoints related to the currently logged-in user (profile)."
    },
    {
      "name": "Projects",
      "description": "CRUD operations on user projects."
    },
    {
      "name": "Individuals",
      "description": "CRUD operations on individuals."
    },
    {
      "name": "Identities",
      "description": "Endpoints for managing identities tied to individuals."
    },
    {
      "name": "Relationships",
      "description": "Endpoints for managing relationships between individuals."
    }
  ],
  "paths": {
    "/api/admin/users": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "List All Users",
        "description": "Retrieve a paginated list of all users. **Requires admin privileges.**",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination (default is 1)."
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of users per page (default is 20, maximum is 100)."
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of users retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of users."
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number."
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of users per page."
                    },
                    "users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserOut"
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "A list of users",
                    "value": {
                      "total": 100,
                      "page": 1,
                      "per_page": 20,
                      "users": [
                        {
                          "id": 1,
                          "username": "johndoe",
                          "email": "johndoe@example.com",
                          "is_admin": false,
                          "created_at": "2023-01-01T12:00:00Z",
                          "updated_at": "2023-01-10T15:30:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user does not have admin privileges.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/signup": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Sign Up (Registration)",
        "description": "Register a new user account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              },
              "example": {
                "username": "johndoe",
                "email": "johndoe@example.com",
                "password": "SecurePass123!",
                "confirm_password": "SecurePass123!"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Signup successful! Please log in."
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful signup",
                    "value": {
                      "message": "Signup successful! Please log in."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "validation_error": {
                    "summary": "Validation error example",
                    "value": {
                      "error": "Password and confirm_password do not match."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Email or username already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "conflict_error": {
                    "summary": "Conflict error example",
                    "value": {
                      "error": "Email or username already in use."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during signup.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "server_error": {
                    "summary": "Server error example",
                    "value": {
                      "error": "An unexpected error occurred."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login",
        "description": "Log in with email and password to obtain access tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              },
              "example": {
                "email": "johndoe@example.com",
                "password": "SecurePass123!"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Login successful!"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful login",
                    "value": {
                      "message": "Login successful!"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "invalid_credentials": {
                    "summary": "Invalid credentials example",
                    "value": {
                      "error": "Invalid email or password."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during login.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "server_error": {
                    "summary": "Server error example",
                    "value": {
                      "error": "An unexpected error occurred."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "Log out the current user by unsetting JWT cookies.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully."
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful logout",
                    "value": {
                      "message": "Logged out successfully."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Profile",
        "description": "Retrieve the profile of the currently logged-in user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Profile retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "User profile example",
                    "value": {
                      "user": {
                        "id": 1,
                        "username": "johndoe",
                        "email": "johndoe@example.com",
                        "is_admin": false,
                        "created_at": "2023-01-01T12:00:00Z",
                        "updated_at": "2023-01-10T15:30:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No user identity in token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while fetching profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update User Profile",
        "description": "Update the current user's username, email, or password.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              },
              "example": {
                "username": "john_doe_new",
                "email": "john.doe.new@example.com",
                "password": "NewSecurePass456!",
                "confirm_password": "NewSecurePass456!"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Profile updated successfully."
                    },
                    "user": {
                      "$ref": "#/components/schemas/UserOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful profile update",
                    "value": {
                      "message": "Profile updated successfully.",
                      "user": {
                        "id": 1,
                        "username": "john_doe_new",
                        "email": "john.doe.new@example.com",
                        "is_admin": false,
                        "created_at": "2023-01-01T12:00:00Z",
                        "updated_at": "2023-01-15T10:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No user identity in token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Username or email already in use.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Error updating profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User Account",
        "description": "Permanently delete the current user's account.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Account deleted successfully."
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful account deletion",
                    "value": {
                      "message": "Account deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No user identity in token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "400": {
            "description": "Failed to delete account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Error deleting account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "List Projects",
        "description": "List all projects belonging to the current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination (default is 1)."
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Number of projects per page (default is 20, maximum is 100)."
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of projects."
                    },
                    "page": {
                      "type": "integer",
                      "description": "Current page number."
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of projects per page."
                    },
                    "projects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectOut"
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "List of projects",
                    "value": {
                      "total": 10,
                      "page": 1,
                      "per_page": 20,
                      "projects": [
                        {
                          "id": 1,
                          "project_number": 1001,
                          "user_id": 1,
                          "name": "Project Alpha",
                          "created_at": "2023-02-01T09:00:00Z",
                          "updated_at": "2023-02-10T14:30:00Z",
                          "entity_counts": {
                            "individuals": 50,
                            "relationships": 100
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error fetching projects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "server_error": {
                    "summary": "Server error example",
                    "value": {
                      "error": "An error occurred while fetching projects."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create Project",
        "description": "Create a new project for the current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Project data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              },
              "example": {
                "name": "Project Beta"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project created successfully."
                    },
                    "project": {
                      "$ref": "#/components/schemas/ProjectOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful project creation",
                    "value": {
                      "message": "Project created successfully.",
                      "project": {
                        "id": 2,
                        "project_number": 1002,
                        "user_id": 1,
                        "name": "Project Beta",
                        "created_at": "2023-03-01T10:00:00Z",
                        "updated_at": "2023-03-01T10:00:00Z",
                        "entity_counts": null
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Project name might be taken.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "conflict_error": {
                    "summary": "Conflict error example",
                    "value": {
                      "error": "Project creation failed. Possibly a project with this name already exists."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error creating project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "server_error": {
                    "summary": "Server error example",
                    "value": {
                      "error": "An error occurred while creating the project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{project_id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project",
        "description": "Retrieve details of a specific project by ID, if owned by the current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "project": {
                      "$ref": "#/components/schemas/ProjectOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Project details example",
                    "value": {
                      "project": {
                        "id": 1,
                        "project_number": 1001,
                        "user_id": 1,
                        "name": "Project Alpha",
                        "created_at": "2023-02-01T09:00:00Z",
                        "updated_at": "2023-02-10T14:30:00Z",
                        "entity_counts": {
                          "individuals": 50,
                          "relationships": 100
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No user identity found in token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found or not owned by the user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Project not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while fetching the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "server_error": {
                    "summary": "Server error example",
                    "value": {
                      "error": "An error occurred while fetching the project."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update Project",
        "description": "Update the name of an existing project, if owned by the current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "description": "Updated project data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              },
              "example": {
                "name": "Project Alpha Updated"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project updated successfully."
                    },
                    "project": {
                      "$ref": "#/components/schemas/ProjectOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful project update",
                    "value": {
                      "message": "Project updated successfully.",
                      "project": {
                        "id": 1,
                        "project_number": 1001,
                        "user_id": 1,
                        "name": "Project Alpha Updated",
                        "created_at": "2023-02-01T09:00:00Z",
                        "updated_at": "2023-03-01T10:00:00Z",
                        "entity_counts": {
                          "individuals": 55,
                          "relationships": 110
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found or unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Project not found."
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Possibly name is in use or project not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "conflict_error": {
                    "summary": "Conflict error example",
                    "value": {
                      "error": "Failed to update project. Possibly name is in use or project not found."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error updating project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "server_error": {
                    "summary": "Server error example",
                    "value": {
                      "error": "An error occurred while updating the project."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete Project",
        "description": "Delete a project by ID, if owned by the current user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Project deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Project deleted successfully."
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful project deletion",
                    "value": {
                      "message": "Project deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found or no permission.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Failed to delete project or no permission."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error occurred while deleting project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "server_error": {
                    "summary": "Server error example",
                    "value": {
                      "error": "An error occurred while deleting the project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/individuals": {
      "get": {
        "tags": [
          "Individuals"
        ],
        "summary": "List Individuals",
        "description": "List all individuals within a specific project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query (optional)."
          }
        ],
        "responses": {
          "200": {
            "description": "List of individuals retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "project_id": {
                      "type": "integer",
                      "description": "ID of the project."
                    },
                    "individuals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IndividualOut"
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "List of individuals",
                    "value": {
                      "project_id": 1,
                      "individuals": [
                        {
                          "id": 42,
                          "individual_number": 2001,
                          "birth_date": "1990-05-15",
                          "birth_place": "New York",
                          "death_date": null,
                          "death_place": null,
                          "notes": "No additional notes.",
                          "age": 33,
                          "primary_identity": {
                            "id": 101,
                            "individual_id": 42,
                            "identity_number": 3001,
                            "first_name": "Jane",
                            "last_name": "Doe",
                            "gender": "female",
                            "valid_from": "2022-01-01",
                            "valid_until": null,
                            "is_primary": true,
                            "created_at": "2023-01-01T12:00:00Z",
                            "updated_at": "2023-01-10T15:30:00Z"
                          },
                          "identities": [
                            {
                              "id": 101
                            },
                            {
                              "id": 102
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Project ID is required or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "Project ID is required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Individuals"
        ],
        "summary": "Create Individual",
        "description": "Create a new individual within a project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "description": "Individual data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndividualCreate"
              },
              "example": {
                "first_name": "John",
                "last_name": "Smith",
                "gender": "male",
                "birth_date": "1985-07-20",
                "birth_place": "Los Angeles",
                "death_date": null,
                "death_place": null,
                "notes": "Additional information about John."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Individual created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Individual created successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/IndividualOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful individual creation",
                    "value": {
                      "message": "Individual created successfully.",
                      "data": {
                        "id": 42,
                        "individual_number": 2001,
                        "birth_date": "1990-05-15",
                        "birth_place": "New York",
                        "death_date": null,
                        "death_place": null,
                        "notes": "No additional notes.",
                        "age": 33,
                        "primary_identity": {
                          "id": 101,
                          "individual_id": 42,
                          "identity_number": 3001,
                          "first_name": "Jane",
                          "last_name": "Doe",
                          "gender": "female",
                          "valid_from": "2022-01-01",
                          "valid_until": null,
                          "is_primary": true,
                          "created_at": "2023-01-01T12:00:00Z",
                          "updated_at": "2023-01-10T15:30:00Z"
                        },
                        "identities": [
                          {
                            "id": 101
                          },
                          {
                            "id": 102
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/individuals/{individual_id}": {
      "get": {
        "tags": [
          "Individuals"
        ],
        "summary": "Get Individual",
        "description": "Retrieve detailed information of a specific individual by ID within a project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "individual_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Individual ID"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Individual retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IndividualOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Individual details example",
                    "value": {
                      "data": {
                        "id": 42,
                        "individual_number": 2001,
                        "birth_date": "1990-05-15",
                        "birth_place": "New York",
                        "death_date": null,
                        "death_place": null,
                        "notes": "No additional notes.",
                        "age": 33,
                        "primary_identity": {
                          "id": 101,
                          "individual_id": 42,
                          "identity_number": 3001,
                          "first_name": "Jane",
                          "last_name": "Doe",
                          "gender": "female",
                          "valid_from": "2022-01-01",
                          "valid_until": null,
                          "is_primary": true,
                          "created_at": "2023-01-01T12:00:00Z",
                          "updated_at": "2023-01-10T15:30:00Z"
                        },
                        "identities": [
                          {
                            "id": 101
                          },
                          {
                            "id": 102
                          }
                        ],
                        "parents": [
                          {
                            "id": 43,
                            "first_name": "Mark",
                            "last_name": "Doe",
                            "relationship_id": 5001
                          }
                        ],
                        "children": [],
                        "partners": [],
                        "siblings": []
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid project ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "Project ID is required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Individual not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Individual not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Individuals"
        ],
        "summary": "Update Individual",
        "description": "Update details of an existing individual by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "individual_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Individual ID"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "description": "Fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndividualUpdate"
              },
              "example": {
                "first_name": "Jane",
                "last_name": "Doe-Smith",
                "gender": "female",
                "birth_date": "2023-01-01",
                "birth_place": "Boston",
                "death_date": null,
                "death_place": null,
                "notes": "Updated notes about the individual."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Individual updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Individual updated successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/IndividualOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful individual update",
                    "value": {
                      "message": "Individual updated successfully.",
                      "data": {
                        "id": 42,
                        "individual_number": 2001,
                        "birth_date": "1990-05-15",
                        "birth_place": "Boston",
                        "death_date": null,
                        "death_place": null,
                        "notes": "Updated notes about the individual.",
                        "age": 34,
                        "primary_identity": {
                          "id": 101,
                          "individual_id": 42,
                          "identity_number": 3001,
                          "first_name": "Jane",
                          "last_name": "Doe-Smith",
                          "gender": "female",
                          "valid_from": "2023-01-01",
                          "valid_until": null,
                          "is_primary": true,
                          "created_at": "2023-01-01T12:00:00Z",
                          "updated_at": "2023-04-01T10:00:00Z"
                        },
                        "identities": [
                          {
                            "id": 101
                          },
                          {
                            "id": 102
                          }
                        ],
                        "parents": [
                          {
                            "id": 43,
                            "first_name": "Mark",
                            "last_name": "Doe",
                            "relationship_id": 5001
                          }
                        ],
                        "children": [],
                        "partners": [],
                        "siblings": []
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Individual not found or unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Failed to update individual."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Individuals"
        ],
        "summary": "Delete Individual",
        "description": "Delete an individual by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "individual_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Individual ID"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Individual deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Individual deleted successfully."
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful individual deletion",
                    "value": {
                      "message": "Individual deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Individual not found or unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Failed to delete individual."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/individuals/search": {
      "get": {
        "tags": [
          "Individuals"
        ],
        "summary": "Search Individuals",
        "description": "Search individuals in a project by query string, excluding specific IDs if desired.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          },
          {
            "name": "q",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search query."
          },
          {
            "name": "exclude_ids",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of individual IDs to exclude from the search results."
          }
        ],
        "responses": {
          "200": {
            "description": "Search results for individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "individuals": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IndividualOut"
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Search results example",
                    "value": {
                      "individuals": [
                        {
                          "id": 42,
                          "individual_number": 2001,
                          "birth_date": "1990-05-15",
                          "birth_place": "New York",
                          "death_date": null,
                          "death_place": null,
                          "notes": "No additional notes.",
                          "age": 33,
                          "primary_identity": {
                            "id": 101,
                            "individual_id": 42,
                            "identity_number": 3001,
                            "first_name": "Jane",
                            "last_name": "Doe",
                            "gender": "female",
                            "valid_from": "2022-01-01",
                            "valid_until": null,
                            "is_primary": true,
                            "created_at": "2023-01-01T12:00:00Z",
                            "updated_at": "2023-01-10T15:30:00Z"
                          },
                          "identities": [
                            {
                              "id": 101
                            },
                            {
                              "id": 102
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Project ID required or invalid exclude_ids.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "Project ID is required."
                    }
                  },
                  "invalid_exclude_ids": {
                    "summary": "Invalid exclude_ids example",
                    "value": {
                      "error": "Invalid exclude_ids parameter."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Project not found or not owned by user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Project not found or not owned by this user."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/identities": {
      "get": {
        "tags": [
          "Identities"
        ],
        "summary": "List Identities",
        "description": "Retrieve a list of all identities within a specific project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "The ID of the project to filter identities."
          }
        ],
        "responses": {
          "200": {
            "description": "List of identities retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "identities": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/IdentityOut"
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "List of identities",
                    "value": {
                      "identities": [
                        {
                          "id": 101,
                          "individual_id": 42,
                          "identity_number": 3001,
                          "first_name": "Jane",
                          "last_name": "Doe",
                          "gender": "female",
                          "valid_from": "2022-01-01",
                          "valid_until": null,
                          "is_primary": true,
                          "created_at": "2023-01-01T12:00:00Z",
                          "updated_at": "2023-01-10T15:30:00Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Project ID is required or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "Project ID is required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Identities"
        ],
        "summary": "Create Identity",
        "description": "Create a new identity for an individual within a project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Identity data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityCreate"
              },
              "example": {
                "individual_id": 42,
                "first_name": "Jane",
                "last_name": "Doe",
                "gender": "female",
                "valid_from": "2022-01-01",
                "valid_until": null
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Identity created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Identity created successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/IdentityOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful identity creation",
                    "value": {
                      "message": "Identity created successfully.",
                      "data": {
                        "id": 103,
                        "individual_id": 42,
                        "identity_number": 3002,
                        "first_name": "Jane",
                        "last_name": "Doe",
                        "gender": "female",
                        "valid_from": "2022-01-01",
                        "valid_until": null,
                        "is_primary": false,
                        "created_at": "2023-01-05T08:00:00Z",
                        "updated_at": "2023-01-05T08:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/identities/{identity_id}": {
      "get": {
        "tags": [
          "Identities"
        ],
        "summary": "Get Specific Identity",
        "description": "Retrieve detailed information of a specific identity by its ID within a project.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "identity_id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the identity to retrieve.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "description": "The ID of the project to which the identity belongs.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Identity retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/IdentityOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Identity details example",
                    "value": {
                      "data": {
                        "id": 101,
                        "individual_id": 42,
                        "identity_number": 3001,
                        "first_name": "Jane",
                        "last_name": "Doe",
                        "gender": "female",
                        "valid_from": "2022-01-01",
                        "valid_until": null,
                        "is_primary": true,
                        "created_at": "2023-01-01T12:00:00Z",
                        "updated_at": "2023-01-10T15:30:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid project ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "Project ID is required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Identity not found in the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Identity not found."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Identities"
        ],
        "summary": "Update Identity",
        "description": "Update details of an identity by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "identity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Identity ID"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityUpdate"
              },
              "example": {
                "first_name": "Jane",
                "last_name": "Doe-Smith",
                "gender": "female",
                "valid_from": "2023-01-01",
                "valid_until": null,
                "is_primary": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Identity updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Identity updated successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/IdentityOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful identity update",
                    "value": {
                      "message": "Identity updated successfully.",
                      "data": {
                        "id": 101,
                        "individual_id": 42,
                        "identity_number": 3001,
                        "first_name": "Jane",
                        "last_name": "Doe-Smith",
                        "gender": "female",
                        "valid_from": "2023-01-01",
                        "valid_until": null,
                        "is_primary": true,
                        "created_at": "2023-01-01T12:00:00Z",
                        "updated_at": "2023-04-01T10:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Identity not found or unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Failed to update identity."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Identities"
        ],
        "summary": "Delete Identity",
        "description": "Delete an identity by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "identity_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Identity ID"
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Identity deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Identity deleted successfully."
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful identity deletion",
                    "value": {
                      "message": "Identity deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Identity not found or unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Failed to delete identity."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/relationships": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "List all Relationships by Project",
        "description": "List all relationships for a given project ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of relationships retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RelationshipOut"
                      }
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "List of relationships",
                    "value": {
                      "relationships": [
                        {
                          "id": 5001,
                          "individual_id": 42,
                          "related_id": 43,
                          "initial_relationship": "child",
                          "relationship_detail": "biological",
                          "union_date": null,
                          "union_place": null,
                          "dissolution_date": null,
                          "notes": "Example relationship notes",
                          "created_at": "2023-01-05T08:00:00Z",
                          "updated_at": "2023-01-05T08:00:00Z",
                          "individual": {
                            "id": 42,
                            "username": "johndoe",
                            "email": "johndoe@example.com",
                            "is_admin": false,
                            "created_at": "2023-01-01T12:00:00Z",
                            "updated_at": "2023-01-10T15:30:00Z"
                          },
                          "related": {
                            "id": 43,
                            "username": "markdoe",
                            "email": "markdoe@example.com",
                            "is_admin": false,
                            "created_at": "2023-01-02T12:00:00Z",
                            "updated_at": "2023-01-11T15:30:00Z"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Project ID is required or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "Project ID is required."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Relationships"
        ],
        "summary": "Create Relationship",
        "description": "Create a new relationship between two individuals.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Project ID"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Relationship data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipCreate"
              },
              "example": {
                "individual_id": 1,
                "related_id": 2,
                "initial_relationship": "child",
                "relationship_detail": "biological",
                "union_date": null,
                "union_place": null,
                "dissolution_date": null,
                "notes": "Example relationship notes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Relationship created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Relationship created successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RelationshipOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful relationship creation",
                    "value": {
                      "message": "Relationship created successfully.",
                      "data": {
                        "id": 5001,
                        "individual_id": 1,
                        "related_id": 2,
                        "initial_relationship": "child",
                        "relationship_detail": "biological",
                        "union_date": null,
                        "union_place": null,
                        "dissolution_date": null,
                        "notes": "Example relationship notes",
                        "created_at": "2023-01-05T08:00:00Z",
                        "updated_at": "2023-01-05T08:00:00Z",
                        "individual": {
                          "id": 1,
                          "username": "johndoe",
                          "email": "johndoe@example.com",
                          "is_admin": false,
                          "created_at": "2023-01-01T12:00:00Z",
                          "updated_at": "2023-01-10T15:30:00Z"
                        },
                        "related": {
                          "id": 2,
                          "username": "janedoe",
                          "email": "janedoe@example.com",
                          "is_admin": false,
                          "created_at": "2023-01-02T12:00:00Z",
                          "updated_at": "2023-01-11T15:30:00Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. No valid JWT provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "One or both individuals not found in this project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "One or both individuals not found in this project."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/relationships/{relationship_id}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get Relationship by ID",
        "description": "Retrieve details of a specific relationship by its ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "relationship_id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the relationship.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "description": "The project ID in which this relationship resides.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relationship retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/RelationshipOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Relationship details example",
                    "value": {
                      "data": {
                        "id": 5001,
                        "individual_id": 1,
                        "related_id": 2,
                        "initial_relationship": "child",
                        "relationship_detail": "biological",
                        "union_date": null,
                        "union_place": null,
                        "dissolution_date": null,
                        "notes": "Example relationship notes",
                        "created_at": "2023-01-05T08:00:00Z",
                        "updated_at": "2023-01-05T08:00:00Z",
                        "individual": {
                          "id": 1,
                          "username": "johndoe",
                          "email": "johndoe@example.com",
                          "is_admin": false,
                          "created_at": "2023-01-01T12:00:00Z",
                          "updated_at": "2023-01-10T15:30:00Z"
                        },
                        "related": {
                          "id": 2,
                          "username": "janedoe",
                          "email": "janedoe@example.com",
                          "is_admin": false,
                          "created_at": "2023-01-02T12:00:00Z",
                          "updated_at": "2023-01-11T15:30:00Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Project ID is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "Project ID is missing or invalid."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "No user identity found in token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "unauthorized": {
                    "summary": "Unauthorized example",
                    "value": {
                      "error": "No user identity in token."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Relationship not found in this project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Relationship not found in this project."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Relationships"
        ],
        "summary": "Update Relationship",
        "description": "Update details of a specific relationship by ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "relationship_id",
            "in": "path",
            "required": true,
            "description": "Relationship ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Relationship data to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipUpdate"
              },
              "example": {
                "initial_relationship": "parent",
                "relationship_detail": "step",
                "union_date": "2023-05-01",
                "union_place": null,
                "dissolution_date": null,
                "notes": "Updated notes about the relationship",
                "individual_id": 1,
                "related_id": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Relationship updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Relationship updated successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/RelationshipOut"
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful relationship update",
                    "value": {
                      "message": "Relationship updated successfully.",
                      "data": {
                        "id": 5001,
                        "individual_id": 1,
                        "related_id": 2,
                        "initial_relationship": "parent",
                        "relationship_detail": "step",
                        "union_date": "2023-05-01",
                        "union_place": null,
                        "dissolution_date": null,
                        "notes": "Updated notes about the relationship",
                        "created_at": "2023-01-05T08:00:00Z",
                        "updated_at": "2023-04-01T10:00:00Z",
                        "individual": {
                          "id": 1,
                          "username": "johndoe",
                          "email": "johndoe@example.com",
                          "is_admin": false,
                          "created_at": "2023-01-01T12:00:00Z",
                          "updated_at": "2023-01-10T15:30:00Z"
                        },
                        "related": {
                          "id": 2,
                          "username": "janedoe",
                          "email": "janedoe@example.com",
                          "is_admin": false,
                          "created_at": "2023-01-02T12:00:00Z",
                          "updated_at": "2023-01-11T15:30:00Z"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "No input data provided."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Relationship not found or unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Relationship not found or unauthorized access."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Relationships"
        ],
        "summary": "Delete Relationship",
        "description": "Delete a specific relationship by its ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "relationship_id",
            "in": "path",
            "required": true,
            "description": "The unique ID of the relationship to delete.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relationship deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Relationship deleted successfully."
                    }
                  }
                },
                "examples": {
                  "success": {
                    "summary": "Successful relationship deletion",
                    "value": {
                      "message": "Relationship deleted successfully."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Relationship not found or unauthorized access.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "not_found": {
                    "summary": "Not found example",
                    "value": {
                      "error": "Relationship not found or unauthorized access."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed to delete relationship.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "bad_request": {
                    "summary": "Bad request example",
                    "value": {
                      "error": "Failed to delete relationship."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserCreate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "description": "Unique username for the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address."
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128,
            "description": "Password for the user account."
          },
          "confirm_password": {
            "type": "string",
            "description": "Confirmation of the password."
          }
        },
        "required": [
          "username",
          "email",
          "password",
          "confirm_password"
        ],
        "example": {
          "username": "johndoe",
          "email": "johndoe@example.com",
          "password": "SecurePass123!",
          "confirm_password": "SecurePass123!"
        }
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address."
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128,
            "description": "Password for the user account."
          }
        },
        "required": [
          "email",
          "password"
        ],
        "example": {
          "email": "johndoe@example.com",
          "password": "SecurePass123!"
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "nullable": true,
            "description": "New username for the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true,
            "description": "New email address for the user."
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "maxLength": 128,
            "nullable": true,
            "description": "New password for the user account."
          },
          "confirm_password": {
            "type": "string",
            "nullable": true,
            "description": "Confirmation of the new password."
          }
        },
        "example": {
          "username": "john_doe_new",
          "email": "john.doe.new@example.com",
          "password": "NewSecurePass456!",
          "confirm_password": "NewSecurePass456!"
        }
      },
      "UserOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the user."
          },
          "username": {
            "type": "string",
            "description": "Username of the user."
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the user."
          },
          "is_admin": {
            "type": "boolean",
            "description": "Flag indicating if the user has admin privileges."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated."
          }
        },
        "example": {
          "id": 1,
          "username": "johndoe",
          "email": "johndoe@example.com",
          "is_admin": false,
          "created_at": "2023-01-01T12:00:00Z",
          "updated_at": "2023-01-10T15:30:00Z"
        }
      },
      "ProjectCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the project."
          }
        },
        "required": [
          "name"
        ],
        "example": {
          "name": "Project Beta"
        }
      },
      "ProjectUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Updated name of the project."
          }
        },
        "example": {
          "name": "Project Alpha Updated"
        }
      },
      "ProjectOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the project."
          },
          "project_number": {
            "type": "integer",
            "description": "Unique project number."
          },
          "user_id": {
            "type": "integer",
            "description": "ID of the user who owns the project."
          },
          "name": {
            "type": "string",
            "description": "Name of the project."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the project was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the project was last updated."
          },
          "entity_counts": {
            "type": "object",
            "nullable": true,
            "properties": {
              "individuals": {
                "type": "integer",
                "description": "Number of individuals in the project."
              },
              "relationships": {
                "type": "integer",
                "description": "Number of relationships in the project."
              }
            },
            "example": {
              "individuals": 50,
              "relationships": 100
            }
          }
        },
        "example": {
          "id": 1,
          "project_number": 1001,
          "user_id": 1,
          "name": "Project Alpha",
          "created_at": "2023-02-01T09:00:00Z",
          "updated_at": "2023-02-10T14:30:00Z",
          "entity_counts": {
            "individuals": 50,
            "relationships": 100
          }
        }
      },
      "ProjectOutShort": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the project."
          },
          "name": {
            "type": "string",
            "description": "Name of the project."
          }
        }
      },
      "IndividualCreate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "First name of the individual."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "Last name of the individual."
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum"
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Birth date of the individual."
          },
          "birth_place": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Birth place of the individual."
          },
          "death_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Death date of the individual."
          },
          "death_place": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Death place of the individual."
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes about the individual."
          }
        },
        "required": [
          "first_name",
          "last_name",
          "gender"
        ],
        "example": {
          "first_name": "John",
          "last_name": "Smith",
          "gender": "male",
          "birth_date": "1985-07-20",
          "birth_place": "Los Angeles",
          "death_date": null,
          "death_place": null,
          "notes": "Additional information about John."
        }
      },
      "IndividualUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "nullable": true,
            "description": "Updated first name of the individual."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "nullable": true,
            "description": "Updated last name of the individual."
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum",
            "nullable": true
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Updated birth date of the individual."
          },
          "birth_place": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Updated birth place of the individual."
          },
          "death_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Updated death date of the individual."
          },
          "death_place": {
            "type": "string",
            "maxLength": 100,
            "nullable": true,
            "description": "Updated death place of the individual."
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Updated notes about the individual."
          }
        },
        "example": {
          "first_name": "Jane",
          "last_name": "Doe-Smith",
          "gender": "female",
          "birth_date": "2023-01-01",
          "birth_place": "Boston",
          "death_date": null,
          "death_place": null,
          "notes": "Updated notes about the individual."
        }
      },
      "IndividualOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the individual."
          },
          "individual_number": {
            "type": "integer",
            "description": "Unique number assigned to the individual."
          },
          "birth_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Birth date of the individual."
          },
          "birth_place": {
            "type": "string",
            "nullable": true,
            "description": "Birth place of the individual."
          },
          "death_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Death date of the individual."
          },
          "death_place": {
            "type": "string",
            "nullable": true,
            "description": "Death place of the individual."
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Additional notes about the individual."
          },
          "age": {
            "type": "integer",
            "nullable": true,
            "description": "Age of the individual."
          },
          "primary_identity": {
            "$ref": "#/components/schemas/IdentityOut",
            "nullable": true,
            "description": "Primary identity of the individual."
          },
          "identities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityIdOut"
            },
            "description": "List of identities associated with the individual."
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedIndividualShort"
            },
            "description": "List of parents associated with the individual."
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedIndividualShort"
            },
            "description": "List of children associated with the individual."
          },
          "partners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedIndividualShort"
            },
            "description": "List of partners associated with the individual."
          },
          "siblings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedIndividualShortNoRelationship"
            },
            "description": "List of siblings associated with the individual."
          }
        },
        "example": {
          "id": 42,
          "individual_number": 2001,
          "birth_date": "1990-05-15",
          "birth_place": "New York",
          "death_date": null,
          "death_place": null,
          "notes": "No additional notes.",
          "age": 33,
          "primary_identity": {
            "id": 101,
            "individual_id": 42,
            "identity_number": 3001,
            "first_name": "Jane",
            "last_name": "Doe",
            "gender": "female",
            "valid_from": "2022-01-01",
            "valid_until": null,
            "is_primary": true,
            "created_at": "2023-01-01T12:00:00Z",
            "updated_at": "2023-01-10T15:30:00Z"
          },
          "identities": [
            {
              "id": 101
            },
            {
              "id": 102
            }
          ],
          "parents": [
            {
              "id": 43,
              "first_name": "Mark",
              "last_name": "Doe",
              "relationship_id": 5001
            }
          ],
          "children": [],
          "partners": [],
          "siblings": []
        }
      },
      "IdentityCreate": {
        "type": "object",
        "properties": {
          "individual_id": {
            "type": "integer",
            "description": "ID of the individual to associate the identity with."
          },
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "First name associated with the identity."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "description": "Last name associated with the identity."
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum",
            "description": "Gender associated with the identity."
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date from which the identity is valid."
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date until which the identity is valid."
          }
        },
        "required": [
          "individual_id",
          "first_name",
          "last_name",
          "gender"
        ],
        "example": {
          "individual_id": 42,
          "first_name": "Jane",
          "last_name": "Doe",
          "gender": "female",
          "valid_from": "2022-01-01",
          "valid_until": null
        }
      },
      "IdentityUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "nullable": true,
            "description": "Updated first name associated with the identity."
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50,
            "nullable": true,
            "description": "Updated last name associated with the identity."
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum",
            "nullable": true,
            "description": "Updated gender associated with the identity."
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Updated start date of validity."
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Updated end date of validity."
          },
          "is_primary": {
            "type": "boolean",
            "nullable": true,
            "description": "Flag to set the identity as primary."
          }
        },
        "example": {
          "first_name": "Jane",
          "last_name": "Doe-Smith",
          "gender": "female",
          "valid_from": "2023-01-01",
          "valid_until": null,
          "is_primary": true
        }
      },
      "IdentityOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the identity."
          },
          "individual_id": {
            "type": "integer",
            "description": "ID of the individual associated with this identity."
          },
          "identity_number": {
            "type": "integer",
            "description": "Unique number assigned to the identity."
          },
          "first_name": {
            "type": "string",
            "nullable": true,
            "description": "First name associated with the identity."
          },
          "last_name": {
            "type": "string",
            "nullable": true,
            "description": "Last name associated with the identity."
          },
          "gender": {
            "$ref": "#/components/schemas/GenderEnum",
            "nullable": true,
            "description": "Gender associated with the identity."
          },
          "valid_from": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date from which the identity is valid."
          },
          "valid_until": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date until which the identity is valid."
          },
          "is_primary": {
            "type": "boolean",
            "description": "Flag indicating if this is the primary identity."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the identity was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the identity was last updated."
          }
        },
        "example": {
          "id": 101,
          "individual_id": 42,
          "identity_number": 3001,
          "first_name": "Jane",
          "last_name": "Doe",
          "gender": "female",
          "valid_from": "2022-01-01",
          "valid_until": null,
          "is_primary": true,
          "created_at": "2023-01-01T12:00:00Z",
          "updated_at": "2023-01-10T15:30:00Z"
        }
      },
      "IdentityIdOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the identity."
          }
        },
        "example": {
          "id": 101
        }
      },
      "RelationshipCreate": {
        "type": "object",
        "properties": {
          "individual_id": {
            "type": "integer",
            "description": "ID of the primary individual in the relationship."
          },
          "related_id": {
            "type": "integer",
            "description": "ID of the related individual in the relationship."
          },
          "initial_relationship": {
            "$ref": "#/components/schemas/InitialRelationshipEnum",
            "description": "The initial type of relationship."
          },
          "relationship_detail": {
            "type": "string",
            "nullable": true,
            "description": "Detailed description of the relationship."
          },
          "union_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date when the relationship was formed."
          },
          "union_place": {
            "type": "string",
            "nullable": true,
            "description": "Place where the relationship was formed."
          },
          "dissolution_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date when the relationship was dissolved."
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "maxLength": 255,
            "description": "Additional notes about the relationship."
          }
        },
        "required": [
          "individual_id",
          "related_id",
          "initial_relationship"
        ],
        "example": {
          "individual_id": 1,
          "related_id": 2,
          "initial_relationship": "child",
          "relationship_detail": "biological",
          "union_date": null,
          "union_place": null,
          "dissolution_date": null,
          "notes": "Example relationship notes"
        }
      },
      "RelationshipUpdate": {
        "type": "object",
        "properties": {
          "initial_relationship": {
            "$ref": "#/components/schemas/InitialRelationshipEnum",
            "nullable": true,
            "description": "Updated initial type of relationship."
          },
          "relationship_detail": {
            "type": "string",
            "nullable": true,
            "description": "Updated detailed description of the relationship."
          },
          "union_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Updated date when the relationship was formed."
          },
          "union_place": {
            "type": "string",
            "nullable": true,
            "description": "Updated place where the relationship was formed."
          },
          "dissolution_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Updated date when the relationship was dissolved."
          },
          "notes": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Updated notes about the relationship."
          },
          "individual_id": {
            "type": "integer",
            "nullable": true,
            "description": "Updated ID of the primary individual in the relationship."
          },
          "related_id": {
            "type": "integer",
            "nullable": true,
            "description": "Updated ID of the related individual in the relationship."
          }
        },
        "example": {
          "initial_relationship": "parent",
          "relationship_detail": "step",
          "union_date": "2023-05-01",
          "union_place": null,
          "dissolution_date": null,
          "notes": "Updated notes about the relationship",
          "individual_id": 1,
          "related_id": 2
        }
      },
      "RelationshipOut": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the relationship."
          },
          "individual_id": {
            "type": "integer",
            "description": "The ID of the primary individual in the relationship."
          },
          "related_id": {
            "type": "integer",
            "description": "The ID of the related individual in the relationship."
          },
          "initial_relationship": {
            "$ref": "#/components/schemas/InitialRelationshipEnum",
            "description": "The initial type of relationship."
          },
          "relationship_detail": {
            "type": "string",
            "nullable": true,
            "description": "Detailed description of the relationship."
          },
          "union_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date when the relationship was formed."
          },
          "union_place": {
            "type": "string",
            "nullable": true,
            "description": "Place where the relationship was formed."
          },
          "dissolution_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date when the relationship was dissolved."
          },
          "notes": {
            "type": "string",
            "maxLength": 255,
            "nullable": true,
            "description": "Additional notes about the relationship."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the relationship was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the relationship was last updated."
          },
          "individual": {
            "$ref": "#/components/schemas/UserOut",
            "description": "Details of the primary individual in the relationship."
          },
          "related": {
            "$ref": "#/components/schemas/UserOut",
            "description": "Details of the related individual in the relationship."
          }
        },
        "example": {
          "id": 5001,
          "individual_id": 1,
          "related_id": 2,
          "initial_relationship": "child",
          "relationship_detail": "biological",
          "union_date": null,
          "union_place": null,
          "dissolution_date": null,
          "notes": "Example relationship notes",
          "created_at": "2023-01-05T08:00:00Z",
          "updated_at": "2023-01-05T08:00:00Z",
          "individual": {
            "id": 1,
            "username": "johndoe",
            "email": "johndoe@example.com",
            "is_admin": false,
            "created_at": "2023-01-01T12:00:00Z",
            "updated_at": "2023-01-10T15:30:00Z"
          },
          "related": {
            "id": 2,
            "username": "janedoe",
            "email": "janedoe@example.com",
            "is_admin": false,
            "created_at": "2023-01-02T12:00:00Z",
            "updated_at": "2023-01-11T15:30:00Z"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message detailing what went wrong."
          }
        },
        "example": {
          "error": "Invalid email or password."
        }
      },
      "GenderEnum": {
        "type": "string",
        "enum": [
          "female",
          "male",
          "transgender",
          "gender neutral",
          "non binary",
          "agender",
          "pangender",
          "genderqueer",
          "two spirit",
          "third gender",
          "other",
          "unknown"
        ],
        "description": "Gender of the individual."
      },
      "InitialRelationshipEnum": {
        "type": "string",
        "enum": [
          "child",
          "parent",
          "partner"
        ],
        "description": "The initial type of relationship."
      },
      "HorizontalRelationshipTypeEnum": {
        "type": "string",
        "enum": [
          "biological",
          "step",
          "adoptive",
          "foster",
          "other"
        ],
        "description": "Types of horizontal relationships for child/parent."
      },
      "VerticalRelationshipTypeEnum": {
        "type": "string",
        "enum": [
          "marriage",
          "civil union",
          "partnership"
        ],
        "description": "Types of vertical relationships for partners."
      },
      "RelatedIndividualShort": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the related individual."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the related individual."
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the related individual."
          },
          "relationship_id": {
            "type": "integer",
            "description": "Relationship ID associated with the related individual."
          }
        },
        "example": {
          "id": 43,
          "first_name": "Mark",
          "last_name": "Doe",
          "relationship_id": 5001
        }
      },
      "RelatedIndividualShortNoRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the related individual."
          },
          "first_name": {
            "type": "string",
            "description": "First name of the related individual."
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the related individual."
          }
        },
        "example": {
          "id": 44,
          "first_name": "Emily",
          "last_name": "Doe"
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
      }
    }
  }
}